name: Tests

on: [push, pull_request]

env:
    BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
    jest:
        name: Jest
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Enable corepack
              run: corepack enable

            - name: Setup NodeJS
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
                  cache: "npm"
                  cache-dependency-path: package-lock.json

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Test
              run: npm run test

    prettier:
        name: Prettier
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Enable corepack
              run: corepack enable

            - name: Setup NodeJS
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
                  cache: "npm"
                  cache-dependency-path: package-lock.json

            - name: Install dependencies
              run: npm ci

            - name: Execute prettier
              run: |
                  npm run lint
                  npx prettier . --check

    integration-private:
        name: Integration test with private template
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write

        steps:
            # Create git client with PAT that has access to the private template
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.PRIVATE_TEMPLATE_TEST_PAT }}

            - name: Setup git
              run: |
                  git config user.name github-int-test
                  git config user.email github-int-test@github.com

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Sync
              id: sync
              uses: ./
              with:
                  repoPath: HanseltimeIndustries/test-private-template
                  githubToken: ${{ secrets.GITHUB_TOKEN }}
                  remoteRepoToken: ${{ secrets.PRIVATE_TEMPLATE_TEST_PAT }}
                  templateBranch: main
                  commitMsg: "build(boilerplate-int-test): synchronize template repo"
                  branchPrefix: ${{ env.BRANCH_NAME }}
                  mockLocalConfig: "{}"

            - name: Assert changes
              run: |
                  npx ts-node tests/integration/utils/assert.ts \
                    --expectedPullNumber "${{ steps.sync.outputs.prNumber }}" \
                    --expectedToBranch "main" \
                    --expectedFromBranch "main" \
                    --expectedFilesChanged "new_file.md" "package.json" "templatesync.json" "templatesync.local.json" \
                    --expectedFromRepoPath "HanseltimeIndustries/test-private-template" \
                    --expectedBranchPrefix "${{ env.BRANCH_NAME }}"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Cleanup
              if: always()
              run: |
                  npx ts-node tests/integration/utils/cleanup.ts \
                    --expectedPullNumber "${{ steps.sync.outputs.prNumber }}" \
                    --expectedFromBranch "main" \
                    --expectedFromRepoPath "HanseltimeIndustries/test-private-template" \
                    --expectedBranchPrefix "${{ env.BRANCH_NAME }}"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    integration-public:
        name: Integration test with public template
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup git
              run: |
                  git config user.name github-int-test
                  git config user.email github-int-test@github.com

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Sync
              id: sync
              uses: ./
              with:
                  repoPath: HanseltimeIndustries/test-public-template
                  githubToken: ${{ secrets.GITHUB_TOKEN }}
                  templateBranch: main
                  commitMsg: "build(boilerplate-int-test): synchronize template repo"
                  branchPrefix: ${{ env.BRANCH_NAME }}-public-update-ref
                  updateAfterRef: false
                  mockLocalConfig: "{}"

            - name: Assert changes
              run: |
                  npx ts-node tests/integration/utils/assert.ts \
                    --expectedPullNumber "${{ steps.sync.outputs.prNumber }}" \
                    --expectedToBranch "main" \
                    --expectedFromBranch "main" \
                    --expectedFilesChanged "new_file.md" "package.json" "templatesync.json" "templatesync.local.json" \
                    --expectedFromRepoPath "HanseltimeIndustries/test-public-template" \
                    --expectedBranchPrefix "${{ env.BRANCH_NAME }}-public-update-ref"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Cleanup
              if: always()
              run: |
                  npx ts-node tests/integration/utils/cleanup.ts \
                    --expectedPullNumber "${{ steps.sync.outputs.prNumber }}" \
                    --expectedFromBranch "main" \
                    --expectedFromRepoPath "HanseltimeIndustries/test-public-template" \
                    --expectedBranchPrefix "${{ env.BRANCH_NAME }}-public-update-ref"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
